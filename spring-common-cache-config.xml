<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-lazy-init="false">

  <!-- jedis连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxTotal" value="${redis.pool.maxActive}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<property name="numTestsPerEvictionRun" value="1024" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="minEvictableIdleTimeMillis" value="-1" />
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnReturn" value="false" />
		<!-- <property name="jmxEnabled" value="true" />
		<property name="jmxNamePrefix" value="youyuan" />
		<property name="blockWhenExhausted" value="false" /> -->
	</bean>
  
  <!-- jedis分片连接池 -->
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg index="0" value="${redis.1.host}" />
					<constructor-arg index="1" value="${redis.1.port}" type="int" />
					<property name="password" value="${redis.1.password}" />
					<!-- <property name="weight" value="${redis.1.weight}" /> -->
				</bean>
			</list>
		</constructor-arg>
	</bean>  

	<!-- spring集成 -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:hostName="${redis.1.host}" p:port="${redis.1.port}" p:password="${redis.1.password}"
		p:poolConfig-ref="jedisPoolConfig" />
		
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="enableTransactionSupport" value="${redis.transaction.support}" />
		<property name="keySerializer">  
           <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
       </property>  
       <property name="valueSerializer">  
           <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
       </property> 
	</bean>
	
   <!-- spring-jedis缓存管理 -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations" ref="redisTemplate" />
		<property name="cacheNames">
			<set>
				<value>NEOKLINIK</value>
				<value>NEOKLINIK_STATIC</value>
			</set>
		</property>
		<property name="expires">
			<map>
				<entry key="NEOKLINIK" value="180" />
				<entry key="NEOKLINIK_STATIC" value="604800" />
			</map>
		</property>
		<property name="defaultExpiration" value="3600" />
		<property name="usePrefix" value="true" />
		<property name="cachePrefix" ref="redisCachePrefix" /><!-- THE REALLY KEY cachename + prefix + key -->
	</bean>
	
  <!-- spring-jedis缓存 相关配置 -->
	<bean id="redisCachePrefix" class="org.springframework.data.redis.cache.DefaultRedisCachePrefix">
		<constructor-arg name="delimiter" value="${spring.cache.prefix}" />
	</bean>
	
  <!-- spirng-redis 注解开启 -->
	<cache:annotation-driven cache-manager="cacheManager"/>
</beans>
